name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: huyenthai01/chat-service
  PROJECT_PATH: src/ChatService/ChatService.csproj
  TEST_PATH: src/ChatService.Tests/ChatService.Tests.csproj
  TAG_NAME: latest

permissions:
  security-events: write

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: dotnet restore
      - run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: dotnet tool install -g dotnet-format
      - run: dotnet format --verify-no-changes
      - run: dotnet tool install -g Microsoft.CST.DevSkim.CLI
      - run: |
          mkdir -p security-reports
          devskim analyze -I src/ -O security-reports/devskim.sarif -f sarif
      - uses: actions/upload-artifact@v4
        with:
          name: devskim-report
          path: security-reports/devskim.sarif
      - name: Upload DevSkim SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-reports/devskim.sarif

  code-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Run Tests with Coverage
        run: |
          dotnet test ${{ env.TEST_PATH }} --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
      - name: Generate Cobertura Report
        run: |
          mkdir -p coverage
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage" \
            -reporttypes:"Cobertura;HtmlInline_AzurePipelines"
      - name: Rename report for Codacy
        run: mv coverage/Cobertura.xml coverage/cobertura.xml
      - name: List generated files (debug)
        run: ls -R coverage
      - name: Upload coverage to Codacy
        shell: bash
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          curl -Ls https://coverage.codacy.com/get.sh | bash
          if [ ! -f coverage/cobertura.xml ]; then
            echo "coverage/cobertura.xml not found"
            exit 1
          fi
          echo "Found coverage report"
          /home/runner/.cache/codacy/coverage-reporter/14.1.0/codacy-coverage-reporter \
            report \
            --project-token $CODACY_PROJECT_TOKEN \
            --commit-uuid ${{ github.sha }} \
            --language CSharp \
            -r coverage/cobertura.xml
      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: coverage

  codeql:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: +security-and-quality
      - name: Restore and Build
        run: |
          dotnet restore
          dotnet build ${{ env.PROJECT_PATH }} --configuration Release
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  gitleaks:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - name: Run Gitleaks to detect secrets
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        with:
          args: detect --redact -v --report-format=sarif --report-path=results.sarif
      - name: Upload Gitleaks SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  hadolint:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Run Hadolint with Docker and output SARIF
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile --format sarif > hadolint-results.sarif || true

      - name: Upload Hadolint SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif



  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "ChatService"
          format: "HTML"
          out: "dependency-check-report"
      - name: Upload Dependency Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-report
          path: dependency-check-report

  # docker-security:
  #   runs-on: ubuntu-latest
  #   needs: docker-image-and-push
  #   permissions:
  #     security-events: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Log in to Docker Hub
  #       run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
  #     - name: Install Trivy
  #       run: |
  #         curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  #     - name: Run Trivy Scan (SARIF + HTML)
  #       run: |
  #         mkdir -p security-reports
  #         tag="${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
  #         docker pull "$tag"
  #         curl -sL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o html.tpl
  #         trivy image --format sarif --output security-reports/trivy-report.sarif "$tag"
  #         trivy image --format template --template "@html.tpl" -o security-reports/trivy-report.html "$tag"
  #     - name: Upload Trivy Reports
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: trivy-security-reports
  #         path: security-reports
  #     - name: Upload Trivy SARIF to GitHub Security
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: security-reports/trivy-report.sarif

  docker-image-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE="${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          LATEST="${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
          docker build -t "$IMAGE" -t "$LATEST" .
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      - name: Push Docker image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          docker push "${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          docker push "${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
