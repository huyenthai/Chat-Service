image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
  - build
  - test
  - sonarcloud
  - dockerize
  - deploy


variables:
  DOCKER_IMAGE_NAME: huyenthai01/chat-service
  PROJECT_PATH: src/ChatService/ChatService.csproj
  TEST_PATH: src/ChatService.Tests/ChatService.Tests.csproj
  TAG_NAME: latest

build:
  stage: build
  tags:
    - project
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - dotnet restore
    - dotnet build $PROJECT_PATH --configuration Release

test:
  stage: test
  tags:
    - project
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - dotnet restore
    - dotnet test $TEST_PATH --configuration Release --collect:"XPlat Code Coverage"

dockerize:
  stage: dockerize
  tags:
    - project
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 0
  script:
    - tag1="${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - tag2="${DOCKER_IMAGE_NAME}:${TAG_NAME}"
    - cd "$CI_PROJECT_DIR"
    - docker build -t "$tag1" -t "$tag2" .
  only:
    - branches

deploy:
  stage: deploy
  tags:
    - project
  image: docker:latest
  script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
    - docker push "$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_IMAGE_NAME:$TAG_NAME"
  only:
    - branches


sonarcloud:
  stage: sonarcloud
  tags:
    - project
  image: mcr.microsoft.com/dotnet/sdk:8.0
  variables:
    GIT_DEPTH: 0
  script:
    # Install the SonarScanner globally
    - dotnet tool install --global dotnet-sonarscanner
    - export PATH="$PATH:/root/.dotnet/tools"

    # Create test results directory
    - mkdir -p TestResults

    # Begin Sonar analysis
    - dotnet sonarscanner begin /k:"chat-service" /o:"messaging" /d:sonar.login="$SONAR_CLOUD_TOKEN" /d:sonar.cs.cobertura.reportsPaths="TestResults/coverage.cobertura.xml"

    # Build the application
    - dotnet build --configuration Debug

    # Run tests and collect coverage
    - dotnet test src/ChatService.Tests/ChatService.Tests.csproj --no-build --configuration Debug --collect:"XPlat Code Coverage" --results-directory TestResults

    # Move the actual coverage file to expected location
    - find TestResults -name "coverage.cobertura.xml" -exec cp {} TestResults/coverage.cobertura.xml \;

    # Optional: debug output
    - ls -R TestResults/
    - cat TestResults/coverage.cobertura.xml | head -n 20 || echo "Coverage file not found"

    # End Sonar analysis
    - dotnet sonarscanner end /d:sonar.login="$SONAR_CLOUD_TOKEN"







