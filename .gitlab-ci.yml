image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
  - build
  - test
  - analyze
  - coverage
  - dockerize
  - deploy

variables:
  DOCKER_IMAGE_NAME: huyenthai01/chat-service
  PROJECT_PATH: src/ChatService/ChatService.csproj
  TEST_PATH: src/ChatService.Tests/ChatService.Tests.csproj
  TAG_NAME: latest

# Build Project
build:
  stage: build
  tags:
    - project
  script:
    - dotnet restore
    - dotnet build $PROJECT_PATH --configuration Release

code-quality:
  stage: analyze
  tags:
    - project
  script:
    - export PATH="$PATH:/root/.dotnet/tools"
    - dotnet tool install -g dotnet-format
    - dotnet format --verify-no-changes

    # Install DevSkim CLI manually from GitHub
    - apt-get update && apt-get install -y wget unzip
    - wget https://github.com/microsoft/DevSkim/releases/download/v1.0.16/DevSkim-CLI_1.0.16_linux-x64.zip
    - unzip DevSkim-CLI_1.0.16_linux-x64.zip -d devskim
    - chmod +x devskim/DevSkim
    - mkdir -p security-reports
    - ./devskim/DevSkim analyze --path src/ --output-file security-reports/devskim.sarif --format sarif
  artifacts:
    paths:
      - security-reports/devskim.sarif
    expire_in: 1 week


# Unit Test + Coverage Report
code-coverage:
  stage: coverage
  tags:
    - project
  script:
    - dotnet test $TEST_PATH --collect:"XPlat Code Coverage" --results-directory TestResults
    - dotnet tool install -g dotnet-reportgenerator-globaltool
    - export PATH="$PATH:/root/.dotnet/tools"
    - reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
  artifacts:
    paths:
      - coveragereport
    expire_in: 1 week

# CVE Scan on Docker Image
docker-security:
  stage: analyze
  tags:
    - project
  image: docker:latest
  services:
    - docker:dind
  script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - mkdir -p security-reports
    - tag="${DOCKER_IMAGE_NAME}:${TAG_NAME}"
    - docker pull "$tag" || echo "Image not found, skipping pull"
    - trivy image --format json --output security-reports/trivy-report.json "$tag" || echo "Trivy scan completed"
  artifacts:
    paths:
      - security-reports/trivy-report.json
    expire_in: 1 week
  only:
    - branches

# Docker Build
dockerize:
  stage: dockerize
  tags:
    - project
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 0
  script:
    - tag1="${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - tag2="${DOCKER_IMAGE_NAME}:${TAG_NAME}"
    - docker build -t "$tag1" -t "$tag2" .
  only:
    - branches

# Push Docker Image
deploy:
  stage: deploy
  tags:
    - project
  image: docker:latest
  script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
    - docker push "$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_IMAGE_NAME:$TAG_NAME"
  only:
    - branches
