image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
  - build
  - test
  - sonarqube
  - dockerize
  - deploy


variables:
  DOCKER_IMAGE_NAME: huyenthai01/chat-service
  PROJECT_PATH: src/ChatService/ChatService.csproj
  TEST_PATH: src/ChatService.Tests/ChatService.Tests.csproj
  TAG_NAME: latest

build:
  stage: build
  tags:
    - project
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - dotnet restore
    - dotnet build $PROJECT_PATH --configuration Release

test:
  stage: test
  tags:
    - project
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - dotnet restore
    - dotnet test $TEST_PATH --configuration Release --collect:"XPlat Code Coverage"

dockerize:
  stage: dockerize
  tags:
    - project
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 0
  script:
    - tag1="${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - tag2="${DOCKER_IMAGE_NAME}:${TAG_NAME}"
    - cd "$CI_PROJECT_DIR"
    - docker build -t "$tag1" -t "$tag2" .
  only:
    - branches

deploy:
  stage: deploy
  tags:
    - project
  image: docker:latest
  script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
    - docker push "$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_IMAGE_NAME:$TAG_NAME"
  only:
    - branches

sonarqube:
  stage: sonarqube
  tags:
    - project
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - apt-get update && apt-get install -y default-jre
    - dotnet tool install --global dotnet-sonarscanner
    - dotnet tool install --global dotnet-reportgenerator-globaltool
    - export PATH="$PATH:/root/.dotnet/tools"
    - |
      dotnet sonarscanner begin \
        /k:"chat-service" \
        /d:sonar.host.url="$SONAR_HOST_URL" \
        /d:sonar.login="$SONAR_TOKEN" \
        /d:sonar.cs.opencover.reportsPaths="coverage-report/Cobertura.xml"
    - dotnet build $PROJECT_PATH
    - dotnet test $TEST_PATH --collect:"XPlat Code Coverage" --results-directory "TestResults"
    - COVERAGE_FILE=$(find TestResults -name "coverage.cobertura.xml" | head -n 1)
    - reportgenerator -reports:"$COVERAGE_FILE" -targetdir:coverage-report -reporttypes:Cobertura
    - sed -i 's|C:\\\\Users\\\\31645\\\\Desktop\\\\Messaging application\\\\chat-service\\\\||g' coverage-report/Cobertura.xml
    - ls -lh coverage-report/Cobertura.xml
    - dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
  artifacts:
    paths:
      - coverage-report/
    when: always


